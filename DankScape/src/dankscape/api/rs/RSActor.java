/*
 * RSActor.java
 * ---------------------------------------------------------------------------
 * Note: this file was automatically generated by the DankScape API Generator,
 * modifications to this file are useless as it will have to be regenerated often in the future.
 */

package dankscape.api.rs;

import dankscape.loader.AppletLoader;

// Original name: bm => eo (Renderable) => gd (CacheableNode) => gw (Node) => java.lang.Object
public class RSActor extends RSRenderable {

    public RSActor(Object ref) {
        super(ref);
    }

    public int getGraphicsDelay() {
        return (int)AppletLoader.getSingleton().getFieldValue("Actor", "graphicsDelay", ref);
    }

    public int getOrientation() {
        return (int)AppletLoader.getSingleton().getFieldValue("Actor", "orientation", ref);
    }

    public int getQueueSize() {
        return (int)AppletLoader.getSingleton().getFieldValue("Actor", "queueSize", ref);
    }

    public java.lang.String getOverhead() {
        return (java.lang.String)AppletLoader.getSingleton().getFieldValue("Actor", "overhead", ref);
    }

    public int getInteracting() {
        return (int)AppletLoader.getSingleton().getFieldValue("Actor", "interacting", ref);
    }

    public int[] getHitsplatTypes() {
        return (int[])AppletLoader.getSingleton().getFieldValue("Actor", "hitsplatTypes", ref);
    }

    public int[] getPathX() {
        return (int[])AppletLoader.getSingleton().getFieldValue("Actor", "pathX", ref);
    }

    public RSCombatInfoList getCombatInfoList() {
        Object objects = (Object)AppletLoader.getSingleton().getFieldValue("Actor", "combatInfoList", ref);
        RSCombatInfoList wrappers = null;
        if(objects != null)
            wrappers = (RSCombatInfoList)getWrapper(objects);
        return wrappers;
    }

    public int[] getPathY() {
        return (int[])AppletLoader.getSingleton().getFieldValue("Actor", "pathY", ref);
    }

    public int getAnimation() {
        return (int)AppletLoader.getSingleton().getFieldValue("Actor", "animation", ref);
    }

    public int getOverheadTextCyclesRemaining() {
        return (int)AppletLoader.getSingleton().getFieldValue("Actor", "overheadTextCyclesRemaining", ref);
    }

    public int getActionFrame() {
        return (int)AppletLoader.getSingleton().getFieldValue("Actor", "actionFrame", ref);
    }

    public int getPoseFrame() {
        return (int)AppletLoader.getSingleton().getFieldValue("Actor", "poseFrame", ref);
    }

    public int getActionAnimationDisable() {
        return (int)AppletLoader.getSingleton().getFieldValue("Actor", "actionAnimationDisable", ref);
    }

    public int getNpcCycle() {
        return (int)AppletLoader.getSingleton().getFieldValue("Actor", "npcCycle", ref);
    }

    public boolean getInSequence() {
        return (boolean)AppletLoader.getSingleton().getFieldValue("Actor", "inSequence", ref);
    }

    public int getX() {
        return (int)AppletLoader.getSingleton().getFieldValue("Actor", "x", ref);
    }

    public int[] getHitsplatCycles() {
        return (int[])AppletLoader.getSingleton().getFieldValue("Actor", "hitsplatCycles", ref);
    }

    public int getY() {
        return (int)AppletLoader.getSingleton().getFieldValue("Actor", "y", ref);
    }

    public int getAngle() {
        return (int)AppletLoader.getSingleton().getFieldValue("Actor", "angle", ref);
    }

    public int getIdlePoseAnimation() {
        return (int)AppletLoader.getSingleton().getFieldValue("Actor", "idlePoseAnimation", ref);
    }

    public int getGraphic() {
        return (int)AppletLoader.getSingleton().getFieldValue("Actor", "graphic", ref);
    }

    public byte[] getPathTraversed() {
        return (byte[])AppletLoader.getSingleton().getFieldValue("Actor", "pathTraversed", ref);
    }

    public int getPoseAnimation() {
        return (int)AppletLoader.getSingleton().getFieldValue("Actor", "poseAnimation", ref);
    }

}
