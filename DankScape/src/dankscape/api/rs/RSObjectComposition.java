/*
 * RSObjectComposition.java
 * ---------------------------------------------------------------------------
 * Note: this file was automatically generated by the DankScape API Generator,
 * modifications to this file are useless as it will have to be regenerated often in the future.
 */

package dankscape.api.rs;

import dankscape.loader.AppletLoader;

// Original name: ji => gd (CacheableNode) => gw (Node) => java.lang.Object
public class RSObjectComposition extends RSCacheableNode {

    public RSObjectComposition(Object ref) {
        super(ref);
    }

    public int getDecorDisplacement() {
        return (int)AppletLoader.getSingleton().getFieldValue("ObjectComposition", "decorDisplacement", ref);
    }

    public static boolean getObjectDefinition_isLowDetail() {
        return (boolean)AppletLoader.getSingleton().getFieldValue("ObjectComposition", "ObjectDefinition_isLowDetail", null);
    }

    public int getModelSizeX() {
        return (int)AppletLoader.getSingleton().getFieldValue("ObjectComposition", "modelSizeX", ref);
    }

    public int[] getImpostorIds() {
        return (int[])AppletLoader.getSingleton().getFieldValue("ObjectComposition", "impostorIds", ref);
    }

    public int getMapSceneId() {
        return (int)AppletLoader.getSingleton().getFieldValue("ObjectComposition", "mapSceneId", ref);
    }

    public int getModelSizeY() {
        return (int)AppletLoader.getSingleton().getFieldValue("ObjectComposition", "modelSizeY", ref);
    }

    public static RSNodeCache getObjects() {
        Object objects = (Object)AppletLoader.getSingleton().getFieldValue("ObjectComposition", "objects", null);
        RSNodeCache wrappers = null;
        if(objects != null)
            wrappers = (RSNodeCache)getWrapper(objects);
        return wrappers;
    }

    public int getSupportItems() {
        return (int)AppletLoader.getSingleton().getFieldValue("ObjectComposition", "supportItems", ref);
    }

    public int getAmbient() {
        return (int)AppletLoader.getSingleton().getFieldValue("ObjectComposition", "ambient", ref);
    }

    public boolean getIsHollow() {
        return (boolean)AppletLoader.getSingleton().getFieldValue("ObjectComposition", "isHollow", ref);
    }

    public int getVarpId() {
        return (int)AppletLoader.getSingleton().getFieldValue("ObjectComposition", "varpId", ref);
    }

    public int getContouredGround() {
        return (int)AppletLoader.getSingleton().getFieldValue("ObjectComposition", "contouredGround", ref);
    }

    public short[] getRecolorToFind() {
        return (short[])AppletLoader.getSingleton().getFieldValue("ObjectComposition", "recolorToFind", ref);
    }

    public int getOffsetX() {
        return (int)AppletLoader.getSingleton().getFieldValue("ObjectComposition", "offsetX", ref);
    }

    public short[] getTextureToReplace() {
        return (short[])AppletLoader.getSingleton().getFieldValue("ObjectComposition", "textureToReplace", ref);
    }

    public boolean getModelClipped() {
        return (boolean)AppletLoader.getSingleton().getFieldValue("ObjectComposition", "modelClipped", ref);
    }

    public int getOffsetY() {
        return (int)AppletLoader.getSingleton().getFieldValue("ObjectComposition", "offsetY", ref);
    }

    public int getInt1() {
        return (int)AppletLoader.getSingleton().getFieldValue("ObjectComposition", "int1", ref);
    }

    public int getInt4() {
        return (int)AppletLoader.getSingleton().getFieldValue("ObjectComposition", "int4", ref);
    }

    public int getConfigId() {
        return (int)AppletLoader.getSingleton().getFieldValue("ObjectComposition", "configId", ref);
    }

    public int getInt6() {
        return (int)AppletLoader.getSingleton().getFieldValue("ObjectComposition", "int6", ref);
    }

    public int getInt5() {
        return (int)AppletLoader.getSingleton().getFieldValue("ObjectComposition", "int5", ref);
    }

    public static RSIndexDataBase getObjects_ref() {
        Object objects = (Object)AppletLoader.getSingleton().getFieldValue("ObjectComposition", "objects_ref", null);
        RSIndexDataBase wrappers = null;
        if(objects != null)
            wrappers = (RSIndexDataBase)getWrapper(objects);
        return wrappers;
    }

    public int getMapIconId() {
        return (int)AppletLoader.getSingleton().getFieldValue("ObjectComposition", "mapIconId", ref);
    }

    public int[] getObjectModels() {
        return (int[])AppletLoader.getSingleton().getFieldValue("ObjectComposition", "objectModels", ref);
    }

    public int getId() {
        return (int)AppletLoader.getSingleton().getFieldValue("ObjectComposition", "id", ref);
    }

    public int getClipType() {
        return (int)AppletLoader.getSingleton().getFieldValue("ObjectComposition", "clipType", ref);
    }

    public short[] getTextureToFind() {
        return (short[])AppletLoader.getSingleton().getFieldValue("ObjectComposition", "textureToFind", ref);
    }

    public static RSNodeCache getCachedModels() {
        Object objects = (Object)AppletLoader.getSingleton().getFieldValue("ObjectComposition", "cachedModels", null);
        RSNodeCache wrappers = null;
        if(objects != null)
            wrappers = (RSNodeCache)getWrapper(objects);
        return wrappers;
    }

    public int getLength() {
        return (int)AppletLoader.getSingleton().getFieldValue("ObjectComposition", "length", ref);
    }

    public boolean getNonFlatShading() {
        return (boolean)AppletLoader.getSingleton().getFieldValue("ObjectComposition", "nonFlatShading", ref);
    }

    public int getModelSizeHeight() {
        return (int)AppletLoader.getSingleton().getFieldValue("ObjectComposition", "modelSizeHeight", ref);
    }

    public RSIterableHashTable getParams() {
        Object objects = (Object)AppletLoader.getSingleton().getFieldValue("ObjectComposition", "params", ref);
        RSIterableHashTable wrappers = null;
        if(objects != null)
            wrappers = (RSIterableHashTable)getWrapper(objects);
        return wrappers;
    }

    public int getAmbientSoundId() {
        return (int)AppletLoader.getSingleton().getFieldValue("ObjectComposition", "ambientSoundId", ref);
    }

    public boolean getIsRotated() {
        return (boolean)AppletLoader.getSingleton().getFieldValue("ObjectComposition", "isRotated", ref);
    }

    public int getAnimationId() {
        return (int)AppletLoader.getSingleton().getFieldValue("ObjectComposition", "animationId", ref);
    }

    public boolean getObstructsGround() {
        return (boolean)AppletLoader.getSingleton().getFieldValue("ObjectComposition", "obstructsGround", ref);
    }

    public boolean getClipped() {
        return (boolean)AppletLoader.getSingleton().getFieldValue("ObjectComposition", "clipped", ref);
    }

    public boolean getBlocksProjectile() {
        return (boolean)AppletLoader.getSingleton().getFieldValue("ObjectComposition", "blocksProjectile", ref);
    }

    public int getOffsetHeight() {
        return (int)AppletLoader.getSingleton().getFieldValue("ObjectComposition", "offsetHeight", ref);
    }

    public int getContrast() {
        return (int)AppletLoader.getSingleton().getFieldValue("ObjectComposition", "contrast", ref);
    }

    public int getWidth() {
        return (int)AppletLoader.getSingleton().getFieldValue("ObjectComposition", "width", ref);
    }

    public java.lang.String getName() {
        return (java.lang.String)AppletLoader.getSingleton().getFieldValue("ObjectComposition", "name", ref);
    }

    public int[] getObjectTypes() {
        return (int[])AppletLoader.getSingleton().getFieldValue("ObjectComposition", "objectTypes", ref);
    }

    public java.lang.String[] getActions() {
        return (java.lang.String[])AppletLoader.getSingleton().getFieldValue("ObjectComposition", "actions", ref);
    }

    public short[] getRecolorToReplace() {
        return (short[])AppletLoader.getSingleton().getFieldValue("ObjectComposition", "recolorToReplace", ref);
    }

}
