/*
 * RSKitDefinition.java
 * ---------------------------------------------------------------------------
 * Note: this file was automatically generated by the DankScape API Generator,
 * modifications to this file are useless as it will have to be regenerated often in the future.
 */

package dankscape.api.rs;

import dankscape.loader.AppletLoader;

// Original name: ir => gd (CacheableNode) => gw (Node) => java.lang.Object
public class RSKitDefinition extends RSCacheableNode {

    public RSKitDefinition(Object ref) {
        super(ref);
    }

    public short[] getRecolorToFind() {
        return (short[])AppletLoader.getSingleton().getFieldValue("KitDefinition", "recolorToFind", ref);
    }

    public short[] getRetextureToFind() {
        return (short[])AppletLoader.getSingleton().getFieldValue("KitDefinition", "retextureToFind", ref);
    }

    public int getBodyPartId() {
        return (int)AppletLoader.getSingleton().getFieldValue("KitDefinition", "bodyPartId", ref);
    }

    public int[] getModels() {
        return (int[])AppletLoader.getSingleton().getFieldValue("KitDefinition", "models", ref);
    }

    public static RSIndexDataBase getIdentKit_ref() {
        Object objects = (Object)AppletLoader.getSingleton().getFieldValue("KitDefinition", "identKit_ref", null);
        RSIndexDataBase wrappers = null;
        if(objects != null)
            wrappers = (RSIndexDataBase)getWrapper(objects);
        return wrappers;
    }

    public int[] getModelIds() {
        return (int[])AppletLoader.getSingleton().getFieldValue("KitDefinition", "modelIds", ref);
    }

    public short[] getRetextureToReplace() {
        return (short[])AppletLoader.getSingleton().getFieldValue("KitDefinition", "retextureToReplace", ref);
    }

    public static RSNodeCache getIdentKits() {
        Object objects = (Object)AppletLoader.getSingleton().getFieldValue("KitDefinition", "identKits", null);
        RSNodeCache wrappers = null;
        if(objects != null)
            wrappers = (RSNodeCache)getWrapper(objects);
        return wrappers;
    }

    public short[] getRecolorToReplace() {
        return (short[])AppletLoader.getSingleton().getFieldValue("KitDefinition", "recolorToReplace", ref);
    }

    public boolean getNonSelectable() {
        return (boolean)AppletLoader.getSingleton().getFieldValue("KitDefinition", "nonSelectable", ref);
    }

}
