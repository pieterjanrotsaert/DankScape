/*
 * RSBuildType.java
 * ---------------------------------------------------------------------------
 * Note: this file was automatically generated by the DankScape API Generator,
 * modifications to this file are useless as it will have to be regenerated often in the future.
 */

package dankscape.api.rs;

import dankscape.loader.AppletLoader;
import dankscape.api.internal.RSClassWrapper;

// Original name: ii => java.lang.Object
public class RSBuildType extends RSClassWrapper {

    public RSBuildType(Object ref) {
        super(ref);
    }

    public static RSBuildType getRC() {
        Object objects = (Object)AppletLoader.getSingleton().getFieldValue("BuildType", "RC", null);
        RSBuildType wrappers = null;
        if(objects != null)
            wrappers = (RSBuildType)getWrapper(objects);
        return wrappers;
    }

    public java.lang.String getIdentifier() {
        return (java.lang.String)AppletLoader.getSingleton().getFieldValue("BuildType", "identifier", ref);
    }

    public static RSBuildType getBUILD_LIVE() {
        Object objects = (Object)AppletLoader.getSingleton().getFieldValue("BuildType", "BUILD_LIVE", null);
        RSBuildType wrappers = null;
        if(objects != null)
            wrappers = (RSBuildType)getWrapper(objects);
        return wrappers;
    }

    public static RSBuildType getWIP() {
        Object objects = (Object)AppletLoader.getSingleton().getFieldValue("BuildType", "WIP", null);
        RSBuildType wrappers = null;
        if(objects != null)
            wrappers = (RSBuildType)getWrapper(objects);
        return wrappers;
    }

    public static RSBuildType getLIVE() {
        Object objects = (Object)AppletLoader.getSingleton().getFieldValue("BuildType", "LIVE", null);
        RSBuildType wrappers = null;
        if(objects != null)
            wrappers = (RSBuildType)getWrapper(objects);
        return wrappers;
    }

    public int getOrdinal() {
        return (int)AppletLoader.getSingleton().getFieldValue("BuildType", "ordinal", ref);
    }

}
