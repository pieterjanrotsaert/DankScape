/*
 * RSProjectile.java
 * ---------------------------------------------------------------------------
 * Note: this file was automatically generated by the DankScape API Generator,
 * modifications to this file are useless as it will have to be regenerated often in the future.
 */

package dankscape.api.rs;

import dankscape.loader.AppletLoader;

// Original name: cy => eo (Renderable) => gd (CacheableNode) => gw (Node) => java.lang.Object
public class RSProjectile extends RSRenderable {

    public RSProjectile(Object ref) {
        super(ref);
    }

    public int getInteracting() {
        return (int)AppletLoader.getSingleton().getFieldValue("Projectile", "interacting", ref);
    }

    public double getVelocityX() {
        return (double)AppletLoader.getSingleton().getFieldValue("Projectile", "velocityX", ref);
    }

    public double getVelocityZ() {
        return (double)AppletLoader.getSingleton().getFieldValue("Projectile", "velocityZ", ref);
    }

    public double getVelocityY() {
        return (double)AppletLoader.getSingleton().getFieldValue("Projectile", "velocityY", ref);
    }

    public int getStartHeight() {
        return (int)AppletLoader.getSingleton().getFieldValue("Projectile", "startHeight", ref);
    }

    public RSSequence getAnimationSequence() {
        Object objects = (Object)AppletLoader.getSingleton().getFieldValue("Projectile", "animationSequence", ref);
        RSSequence wrappers = null;
        if(objects != null)
            wrappers = (RSSequence)getWrapper(objects);
        return wrappers;
    }

    public int getRotationX() {
        return (int)AppletLoader.getSingleton().getFieldValue("Projectile", "rotationX", ref);
    }

    public int getRotationY() {
        return (int)AppletLoader.getSingleton().getFieldValue("Projectile", "rotationY", ref);
    }

    public int getInt6() {
        return (int)AppletLoader.getSingleton().getFieldValue("Projectile", "int6", ref);
    }

    public int getY1() {
        return (int)AppletLoader.getSingleton().getFieldValue("Projectile", "y1", ref);
    }

    public boolean getIsMoving() {
        return (boolean)AppletLoader.getSingleton().getFieldValue("Projectile", "isMoving", ref);
    }

    public int getInt7() {
        return (int)AppletLoader.getSingleton().getFieldValue("Projectile", "int7", ref);
    }

    public int getEndCycle() {
        return (int)AppletLoader.getSingleton().getFieldValue("Projectile", "endCycle", ref);
    }

    public int getId() {
        return (int)AppletLoader.getSingleton().getFieldValue("Projectile", "id", ref);
    }

    public int getFloor() {
        return (int)AppletLoader.getSingleton().getFieldValue("Projectile", "floor", ref);
    }

    public int getHeight() {
        return (int)AppletLoader.getSingleton().getFieldValue("Projectile", "height", ref);
    }

    public int getStartMovementCycle() {
        return (int)AppletLoader.getSingleton().getFieldValue("Projectile", "startMovementCycle", ref);
    }

    public int getSlope() {
        return (int)AppletLoader.getSingleton().getFieldValue("Projectile", "slope", ref);
    }

    public double getHeightOffset() {
        return (double)AppletLoader.getSingleton().getFieldValue("Projectile", "heightOffset", ref);
    }

    public int getEndHeight() {
        return (int)AppletLoader.getSingleton().getFieldValue("Projectile", "endHeight", ref);
    }

    public double getScalar() {
        return (double)AppletLoader.getSingleton().getFieldValue("Projectile", "scalar", ref);
    }

    public double getX() {
        return (double)AppletLoader.getSingleton().getFieldValue("Projectile", "x", ref);
    }

    public int getX1() {
        return (int)AppletLoader.getSingleton().getFieldValue("Projectile", "x1", ref);
    }

    public double getY() {
        return (double)AppletLoader.getSingleton().getFieldValue("Projectile", "y", ref);
    }

    public double getZ() {
        return (double)AppletLoader.getSingleton().getFieldValue("Projectile", "z", ref);
    }

}
