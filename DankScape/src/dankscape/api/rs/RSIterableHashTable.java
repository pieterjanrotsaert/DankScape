/*
 * RSIterableHashTable.java
 * ---------------------------------------------------------------------------
 * Note: this file was automatically generated by the DankScape API Generator,
 * modifications to this file are useless as it will have to be regenerated often in the future.
 */

package dankscape.api.rs;

import dankscape.loader.AppletLoader;
import dankscape.api.internal.RSClassWrapper;

// Original name: gb => java.lang.Object
public class RSIterableHashTable extends RSClassWrapper {

    public RSIterableHashTable(Object ref) {
        super(ref);
    }

    public RSNode getHead() {
        Object objects = (Object)AppletLoader.getSingleton().getFieldValue("IterableHashTable", "head", ref);
        RSNode wrappers = null;
        if(objects != null)
            wrappers = (RSNode)getWrapper(objects);
        return wrappers;
    }

    public int getSize() {
        return (int)AppletLoader.getSingleton().getFieldValue("IterableHashTable", "size", ref);
    }

    public RSNode getTail() {
        Object objects = (Object)AppletLoader.getSingleton().getFieldValue("IterableHashTable", "tail", ref);
        RSNode wrappers = null;
        if(objects != null)
            wrappers = (RSNode)getWrapper(objects);
        return wrappers;
    }

    public RSNode[] getBuckets() {
        Object[] objects = (Object[])AppletLoader.getSingleton().getFieldValue("IterableHashTable", "buckets", ref);
        RSNode[] wrappers = null;
        if(objects == null)
            return null;
        wrappers = new RSNode[objects.length];
        for(int i = 0;i < objects.length;i++) {
            if(objects[i] != null)
                wrappers[i] = (RSNode)getWrapper(objects[i]);
        }
        return wrappers;
    }

    public Object[] getRSRef_Buckets() {
        return (Object[])AppletLoader.getSingleton().getFieldValue("IterableHashTable", "buckets", ref);
    }

    public int getIndex() {
        return (int)AppletLoader.getSingleton().getFieldValue("IterableHashTable", "index", ref);
    }

}
