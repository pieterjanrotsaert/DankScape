/*
 * RSAudioInstrument.java
 * ---------------------------------------------------------------------------
 * Note: this file was automatically generated by the DankScape API Generator,
 * modifications to this file are useless as it will have to be regenerated often in the future.
 */

package dankscape.api.rs;

import dankscape.loader.AppletLoader;
import dankscape.api.internal.RSClassWrapper;

// Original name: dw => java.lang.Object
public class RSAudioInstrument extends RSClassWrapper {

    public RSAudioInstrument(Object ref) {
        super(ref);
    }

    public static int[] getPitchSteps() {
        return (int[])AppletLoader.getSingleton().getFieldValue("AudioInstrument", "pitchSteps", null);
    }

    public int getDelayDecay() {
        return (int)AppletLoader.getSingleton().getFieldValue("AudioInstrument", "delayDecay", ref);
    }

    public int getOffset() {
        return (int)AppletLoader.getSingleton().getFieldValue("AudioInstrument", "offset", ref);
    }

    public RSAudioEnvelope getRelease() {
        Object objects = (Object)AppletLoader.getSingleton().getFieldValue("AudioInstrument", "release", ref);
        RSAudioEnvelope wrappers = null;
        if(objects != null)
            wrappers = (RSAudioEnvelope)getWrapper(objects);
        return wrappers;
    }

    public static int[] getPitchBaseSteps() {
        return (int[])AppletLoader.getSingleton().getFieldValue("AudioInstrument", "pitchBaseSteps", null);
    }

    public RSAudioEnvelope getVolumeMultiplierAmplitude() {
        Object objects = (Object)AppletLoader.getSingleton().getFieldValue("AudioInstrument", "volumeMultiplierAmplitude", ref);
        RSAudioEnvelope wrappers = null;
        if(objects != null)
            wrappers = (RSAudioEnvelope)getWrapper(objects);
        return wrappers;
    }

    public static int[] getNOISE() {
        return (int[])AppletLoader.getSingleton().getFieldValue("AudioInstrument", "NOISE", null);
    }

    public static int[] getSINE() {
        return (int[])AppletLoader.getSingleton().getFieldValue("AudioInstrument", "SINE", null);
    }

    public static int[] getSamples() {
        return (int[])AppletLoader.getSingleton().getFieldValue("AudioInstrument", "samples", null);
    }

    public int[] getOscillatorPitch() {
        return (int[])AppletLoader.getSingleton().getFieldValue("AudioInstrument", "oscillatorPitch", ref);
    }

    public RSAudioEnvelope getPitchModifierAmplitude() {
        Object objects = (Object)AppletLoader.getSingleton().getFieldValue("AudioInstrument", "pitchModifierAmplitude", ref);
        RSAudioEnvelope wrappers = null;
        if(objects != null)
            wrappers = (RSAudioEnvelope)getWrapper(objects);
        return wrappers;
    }

    public int getDuration() {
        return (int)AppletLoader.getSingleton().getFieldValue("AudioInstrument", "duration", ref);
    }

    public RSSoundEffect3 getFilter() {
        Object objects = (Object)AppletLoader.getSingleton().getFieldValue("AudioInstrument", "filter", ref);
        RSSoundEffect3 wrappers = null;
        if(objects != null)
            wrappers = (RSSoundEffect3)getWrapper(objects);
        return wrappers;
    }

    public RSAudioEnvelope getVolume() {
        Object objects = (Object)AppletLoader.getSingleton().getFieldValue("AudioInstrument", "volume", ref);
        RSAudioEnvelope wrappers = null;
        if(objects != null)
            wrappers = (RSAudioEnvelope)getWrapper(objects);
        return wrappers;
    }

    public RSAudioEnvelope getVolumeMultiplier() {
        Object objects = (Object)AppletLoader.getSingleton().getFieldValue("AudioInstrument", "volumeMultiplier", ref);
        RSAudioEnvelope wrappers = null;
        if(objects != null)
            wrappers = (RSAudioEnvelope)getWrapper(objects);
        return wrappers;
    }

    public int[] getOscillatorVolume() {
        return (int[])AppletLoader.getSingleton().getFieldValue("AudioInstrument", "oscillatorVolume", ref);
    }

    public static int[] getDelays() {
        return (int[])AppletLoader.getSingleton().getFieldValue("AudioInstrument", "delays", null);
    }

    public RSAudioEnvelope getFilterEnvelope() {
        Object objects = (Object)AppletLoader.getSingleton().getFieldValue("AudioInstrument", "filterEnvelope", ref);
        RSAudioEnvelope wrappers = null;
        if(objects != null)
            wrappers = (RSAudioEnvelope)getWrapper(objects);
        return wrappers;
    }

    public RSAudioEnvelope getPitchModifier() {
        Object objects = (Object)AppletLoader.getSingleton().getFieldValue("AudioInstrument", "pitchModifier", ref);
        RSAudioEnvelope wrappers = null;
        if(objects != null)
            wrappers = (RSAudioEnvelope)getWrapper(objects);
        return wrappers;
    }

    public int[] getOscillatorDelays() {
        return (int[])AppletLoader.getSingleton().getFieldValue("AudioInstrument", "oscillatorDelays", ref);
    }

    public int getDelayTime() {
        return (int)AppletLoader.getSingleton().getFieldValue("AudioInstrument", "delayTime", ref);
    }

    public RSAudioEnvelope getPitch() {
        Object objects = (Object)AppletLoader.getSingleton().getFieldValue("AudioInstrument", "pitch", ref);
        RSAudioEnvelope wrappers = null;
        if(objects != null)
            wrappers = (RSAudioEnvelope)getWrapper(objects);
        return wrappers;
    }

    public static int[] getVolumeSteps() {
        return (int[])AppletLoader.getSingleton().getFieldValue("AudioInstrument", "volumeSteps", null);
    }

    public static int[] getPhases() {
        return (int[])AppletLoader.getSingleton().getFieldValue("AudioInstrument", "phases", null);
    }

}
