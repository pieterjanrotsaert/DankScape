/*
 * RSIndexDataBase.java
 * ---------------------------------------------------------------------------
 * Note: this file was automatically generated by the DankScape API Generator,
 * modifications to this file are useless as it will have to be regenerated often in the future.
 */

package dankscape.api.rs;

import dankscape.loader.AppletLoader;
import dankscape.api.internal.RSClassWrapper;

// Original name: il => java.lang.Object
public class RSIndexDataBase extends RSClassWrapper {

    public RSIndexDataBase(Object ref) {
        super(ref);
    }

    public int getValidArchivesCount() {
        return (int)AppletLoader.getSingleton().getFieldValue("IndexDataBase", "validArchivesCount", ref);
    }

    public java.lang.Object[] getArchives() {
        return (java.lang.Object[])AppletLoader.getSingleton().getFieldValue("IndexDataBase", "archives", ref);
    }

    public RSIdentifiers getIdentifiers() {
        Object objects = (Object)AppletLoader.getSingleton().getFieldValue("IndexDataBase", "identifiers", ref);
        RSIdentifiers wrappers = null;
        if(objects != null)
            wrappers = (RSIdentifiers)getWrapper(objects);
        return wrappers;
    }

    public int[] getArchiveCrcs() {
        return (int[])AppletLoader.getSingleton().getFieldValue("IndexDataBase", "archiveCrcs", ref);
    }

    public int[] getArchiveNumberOfFiles() {
        return (int[])AppletLoader.getSingleton().getFieldValue("IndexDataBase", "archiveNumberOfFiles", ref);
    }

    public static RSGZipDecompressor getGzip() {
        Object objects = (Object)AppletLoader.getSingleton().getFieldValue("IndexDataBase", "gzip", null);
        RSGZipDecompressor wrappers = null;
        if(objects != null)
            wrappers = (RSGZipDecompressor)getWrapper(objects);
        return wrappers;
    }

    public RSIdentifiers[] getChildIdentifiers() {
        Object[] objects = (Object[])AppletLoader.getSingleton().getFieldValue("IndexDataBase", "childIdentifiers", ref);
        RSIdentifiers[] wrappers = null;
        if(objects == null)
            return null;
        wrappers = new RSIdentifiers[objects.length];
        for(int i = 0;i < objects.length;i++) {
            if(objects[i] != null)
                wrappers[i] = (RSIdentifiers)getWrapper(objects[i]);
        }
        return wrappers;
    }

    public Object[] getRSRef_ChildIdentifiers() {
        return (Object[])AppletLoader.getSingleton().getFieldValue("IndexDataBase", "childIdentifiers", ref);
    }

    public java.lang.Object[][] getChilds() {
        return (java.lang.Object[][])AppletLoader.getSingleton().getFieldValue("IndexDataBase", "childs", ref);
    }

    public int[] getArchiveNames() {
        return (int[])AppletLoader.getSingleton().getFieldValue("IndexDataBase", "archiveNames", ref);
    }

    public int[] getArchiveIds() {
        return (int[])AppletLoader.getSingleton().getFieldValue("IndexDataBase", "archiveIds", ref);
    }

    public boolean getShallowRecords() {
        return (boolean)AppletLoader.getSingleton().getFieldValue("IndexDataBase", "shallowRecords", ref);
    }

    public int getCrc() {
        return (int)AppletLoader.getSingleton().getFieldValue("IndexDataBase", "crc", ref);
    }

    public int[][] getArchiveFileNames() {
        return (int[][])AppletLoader.getSingleton().getFieldValue("IndexDataBase", "archiveFileNames", ref);
    }

    public int[] getArchiveRevisions() {
        return (int[])AppletLoader.getSingleton().getFieldValue("IndexDataBase", "archiveRevisions", ref);
    }

    public int[][] getArchiveFileIds() {
        return (int[][])AppletLoader.getSingleton().getFieldValue("IndexDataBase", "archiveFileIds", ref);
    }

    public boolean getReleaseArchives() {
        return (boolean)AppletLoader.getSingleton().getFieldValue("IndexDataBase", "releaseArchives", ref);
    }

}
