/*
 * RSClass105.java
 * ---------------------------------------------------------------------------
 * Note: this file was automatically generated by the DankScape API Generator,
 * modifications to this file are useless as it will have to be regenerated often in the future.
 */

package dankscape.api.rs;

import dankscape.loader.AppletLoader;

// Original name: dj => gw (Node) => java.lang.Object
public class RSClass105 extends RSNode {

    public RSClass105(Object ref) {
        super(ref);
    }

    public static int getBlockSize1() {
        return (int)AppletLoader.getSingleton().getFieldValue("class105", "blockSize1", null);
    }

    public static RSMapping[] getMappings() {
        Object[] objects = (Object[])AppletLoader.getSingleton().getFieldValue("class105", "mappings", null);
        RSMapping[] wrappers = null;
        if(objects == null)
            return null;
        wrappers = new RSMapping[objects.length];
        for(int i = 0;i < objects.length;i++) {
            if(objects[i] != null)
                wrappers[i] = (RSMapping)getWrapper(objects[i]);
        }
        return wrappers;
    }

    public static Object[] getRSRef_Mappings() {
        return (Object[])AppletLoader.getSingleton().getFieldValue("class105", "mappings", null);
    }

    public static int getBlockSize0() {
        return (int)AppletLoader.getSingleton().getFieldValue("class105", "blockSize0", null);
    }

    public static RSFloor1[] getFloors() {
        Object[] objects = (Object[])AppletLoader.getSingleton().getFieldValue("class105", "floors", null);
        RSFloor1[] wrappers = null;
        if(objects == null)
            return null;
        wrappers = new RSFloor1[objects.length];
        for(int i = 0;i < objects.length;i++) {
            if(objects[i] != null)
                wrappers[i] = (RSFloor1)getWrapper(objects[i]);
        }
        return wrappers;
    }

    public static Object[] getRSRef_Floors() {
        return (Object[])AppletLoader.getSingleton().getFieldValue("class105", "floors", null);
    }

    public static RSCodeBook[] getCodeBooks() {
        Object[] objects = (Object[])AppletLoader.getSingleton().getFieldValue("class105", "codeBooks", null);
        RSCodeBook[] wrappers = null;
        if(objects == null)
            return null;
        wrappers = new RSCodeBook[objects.length];
        for(int i = 0;i < objects.length;i++) {
            if(objects[i] != null)
                wrappers[i] = (RSCodeBook)getWrapper(objects[i]);
        }
        return wrappers;
    }

    public static Object[] getRSRef_CodeBooks() {
        return (Object[])AppletLoader.getSingleton().getFieldValue("class105", "codeBooks", null);
    }

    public static byte[] getPayload() {
        return (byte[])AppletLoader.getSingleton().getFieldValue("class105", "payload", null);
    }

    public static int[] getModeMappings() {
        return (int[])AppletLoader.getSingleton().getFieldValue("class105", "modeMappings", null);
    }

    public static boolean[] getModeBlockFlags() {
        return (boolean[])AppletLoader.getSingleton().getFieldValue("class105", "modeBlockFlags", null);
    }

    public static RSResidue[] getResidues() {
        Object[] objects = (Object[])AppletLoader.getSingleton().getFieldValue("class105", "residues", null);
        RSResidue[] wrappers = null;
        if(objects == null)
            return null;
        wrappers = new RSResidue[objects.length];
        for(int i = 0;i < objects.length;i++) {
            if(objects[i] != null)
                wrappers[i] = (RSResidue)getWrapper(objects[i]);
        }
        return wrappers;
    }

    public static Object[] getRSRef_Residues() {
        return (Object[])AppletLoader.getSingleton().getFieldValue("class105", "residues", null);
    }

    public static int getPosition() {
        return (int)AppletLoader.getSingleton().getFieldValue("class105", "position", null);
    }

    public static int getBitPosition() {
        return (int)AppletLoader.getSingleton().getFieldValue("class105", "bitPosition", null);
    }

}
