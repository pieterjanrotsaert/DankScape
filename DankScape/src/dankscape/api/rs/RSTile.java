/*
 * RSTile.java
 * ---------------------------------------------------------------------------
 * Note: this file was automatically generated by the DankScape API Generator,
 * modifications to this file are useless as it will have to be regenerated often in the future.
 */

package dankscape.api.rs;

import dankscape.loader.AppletLoader;

// Original name: ej => gw (Node) => java.lang.Object
public class RSTile extends RSNode {

    public RSTile(Object ref) {
        super(ref);
    }

    public int getPlane() {
        return (int)AppletLoader.getSingleton().getFieldValue("Tile", "plane", ref);
    }

    public int getWallCullDirection() {
        return (int)AppletLoader.getSingleton().getFieldValue("Tile", "wallCullDirection", ref);
    }

    public RSGroundObject getGroundObject() {
        Object objects = (Object)AppletLoader.getSingleton().getFieldValue("Tile", "groundObject", ref);
        RSGroundObject wrappers = null;
        if(objects != null)
            wrappers = (RSGroundObject)getWrapper(objects);
        return wrappers;
    }

    public boolean getVisible() {
        return (boolean)AppletLoader.getSingleton().getFieldValue("Tile", "visible", ref);
    }

    public int getRenderLevel() {
        return (int)AppletLoader.getSingleton().getFieldValue("Tile", "renderLevel", ref);
    }

    public RSSceneTileModel getOverlay() {
        Object objects = (Object)AppletLoader.getSingleton().getFieldValue("Tile", "overlay", ref);
        RSSceneTileModel wrappers = null;
        if(objects != null)
            wrappers = (RSSceneTileModel)getWrapper(objects);
        return wrappers;
    }

    public int[] getEntityFlags() {
        return (int[])AppletLoader.getSingleton().getFieldValue("Tile", "entityFlags", ref);
    }

    public int getWallCullOppositeDirection() {
        return (int)AppletLoader.getSingleton().getFieldValue("Tile", "wallCullOppositeDirection", ref);
    }

    public int getWallDrawFlags() {
        return (int)AppletLoader.getSingleton().getFieldValue("Tile", "wallDrawFlags", ref);
    }

    public RSGameObject[] getObjects() {
        Object[] objects = (Object[])AppletLoader.getSingleton().getFieldValue("Tile", "objects", ref);
        RSGameObject[] wrappers = null;
        if(objects == null)
            return null;
        wrappers = new RSGameObject[objects.length];
        for(int i = 0;i < objects.length;i++) {
            if(objects[i] != null)
                wrappers[i] = (RSGameObject)getWrapper(objects[i]);
        }
        return wrappers;
    }

    public Object[] getRSRef_Objects() {
        return (Object[])AppletLoader.getSingleton().getFieldValue("Tile", "objects", ref);
    }

    public int getFlags() {
        return (int)AppletLoader.getSingleton().getFieldValue("Tile", "flags", ref);
    }

    public RSSceneTilePaint getPaint() {
        Object objects = (Object)AppletLoader.getSingleton().getFieldValue("Tile", "paint", ref);
        RSSceneTilePaint wrappers = null;
        if(objects != null)
            wrappers = (RSSceneTilePaint)getWrapper(objects);
        return wrappers;
    }

    public boolean getDraw() {
        return (boolean)AppletLoader.getSingleton().getFieldValue("Tile", "draw", ref);
    }

    public boolean getDrawEntities() {
        return (boolean)AppletLoader.getSingleton().getFieldValue("Tile", "drawEntities", ref);
    }

    public int getPhysicalLevel() {
        return (int)AppletLoader.getSingleton().getFieldValue("Tile", "physicalLevel", ref);
    }

    public RSItemLayer getItemLayer() {
        Object objects = (Object)AppletLoader.getSingleton().getFieldValue("Tile", "itemLayer", ref);
        RSItemLayer wrappers = null;
        if(objects != null)
            wrappers = (RSItemLayer)getWrapper(objects);
        return wrappers;
    }

    public int getWallUncullDirection() {
        return (int)AppletLoader.getSingleton().getFieldValue("Tile", "wallUncullDirection", ref);
    }

    public int getEntityCount() {
        return (int)AppletLoader.getSingleton().getFieldValue("Tile", "entityCount", ref);
    }

    public int getX() {
        return (int)AppletLoader.getSingleton().getFieldValue("Tile", "x", ref);
    }

    public int getY() {
        return (int)AppletLoader.getSingleton().getFieldValue("Tile", "y", ref);
    }

    public RSTile getBridge() {
        Object objects = (Object)AppletLoader.getSingleton().getFieldValue("Tile", "bridge", ref);
        RSTile wrappers = null;
        if(objects != null)
            wrappers = (RSTile)getWrapper(objects);
        return wrappers;
    }

    public RSDecorativeObject getDecorativeObject() {
        Object objects = (Object)AppletLoader.getSingleton().getFieldValue("Tile", "decorativeObject", ref);
        RSDecorativeObject wrappers = null;
        if(objects != null)
            wrappers = (RSDecorativeObject)getWrapper(objects);
        return wrappers;
    }

    public RSWallObject getWallObject() {
        Object objects = (Object)AppletLoader.getSingleton().getFieldValue("Tile", "wallObject", ref);
        RSWallObject wrappers = null;
        if(objects != null)
            wrappers = (RSWallObject)getWrapper(objects);
        return wrappers;
    }

}
