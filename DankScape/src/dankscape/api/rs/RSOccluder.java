/*
 * RSOccluder.java
 * ---------------------------------------------------------------------------
 * Note: this file was automatically generated by the DankScape API Generator,
 * modifications to this file are useless as it will have to be regenerated often in the future.
 */

package dankscape.api.rs;

import dankscape.loader.AppletLoader;
import dankscape.api.internal.RSClassWrapper;

// Original name: ed => java.lang.Object
public class RSOccluder extends RSClassWrapper {

    public RSOccluder(Object ref) {
        super(ref);
    }

    public int getMinNormalY() {
        return (int)AppletLoader.getSingleton().getFieldValue("Occluder", "minNormalY", ref);
    }

    public int getMaxTIleX() {
        return (int)AppletLoader.getSingleton().getFieldValue("Occluder", "maxTIleX", ref);
    }

    public int getMaxNormalX() {
        return (int)AppletLoader.getSingleton().getFieldValue("Occluder", "maxNormalX", ref);
    }

    public int getMaxZ() {
        return (int)AppletLoader.getSingleton().getFieldValue("Occluder", "maxZ", ref);
    }

    public int getMaxY() {
        return (int)AppletLoader.getSingleton().getFieldValue("Occluder", "maxY", ref);
    }

    public int getTestDirection() {
        return (int)AppletLoader.getSingleton().getFieldValue("Occluder", "testDirection", ref);
    }

    public int getMaxNormalY() {
        return (int)AppletLoader.getSingleton().getFieldValue("Occluder", "maxNormalY", ref);
    }

    public int getMaxX() {
        return (int)AppletLoader.getSingleton().getFieldValue("Occluder", "maxX", ref);
    }

    public int getType() {
        return (int)AppletLoader.getSingleton().getFieldValue("Occluder", "type", ref);
    }

    public int getMinTileX() {
        return (int)AppletLoader.getSingleton().getFieldValue("Occluder", "minTileX", ref);
    }

    public int getMinTileZ() {
        return (int)AppletLoader.getSingleton().getFieldValue("Occluder", "minTileZ", ref);
    }

    public int getMinY() {
        return (int)AppletLoader.getSingleton().getFieldValue("Occluder", "minY", ref);
    }

    public int getMinX() {
        return (int)AppletLoader.getSingleton().getFieldValue("Occluder", "minX", ref);
    }

    public int getMinZ() {
        return (int)AppletLoader.getSingleton().getFieldValue("Occluder", "minZ", ref);
    }

    public int getMaxTileZ() {
        return (int)AppletLoader.getSingleton().getFieldValue("Occluder", "maxTileZ", ref);
    }

    public int getMinNormalX() {
        return (int)AppletLoader.getSingleton().getFieldValue("Occluder", "minNormalX", ref);
    }

}
