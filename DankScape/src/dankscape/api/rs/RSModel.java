/*
 * RSModel.java
 * ---------------------------------------------------------------------------
 * Note: this file was automatically generated by the DankScape API Generator,
 * modifications to this file are useless as it will have to be regenerated often in the future.
 */

package dankscape.api.rs;

import dankscape.loader.AppletLoader;

// Original name: es => eo (Renderable) => gd (CacheableNode) => gw (Node) => java.lang.Object
public class RSModel extends RSRenderable {

    public RSModel(Object ref) {
        super(ref);
    }

    public int getXYZMag() {
        return (int)AppletLoader.getSingleton().getFieldValue("Model", "XYZMag", ref);
    }

    public int getVerticesCount() {
        return (int)AppletLoader.getSingleton().getFieldValue("Model", "verticesCount", ref);
    }

    public int getIndicesCount() {
        return (int)AppletLoader.getSingleton().getFieldValue("Model", "indicesCount", ref);
    }

    public static int[] getModelViewportYs() {
        return (int[])AppletLoader.getSingleton().getFieldValue("Model", "modelViewportYs", null);
    }

    public int[] getIndices2() {
        return (int[])AppletLoader.getSingleton().getFieldValue("Model", "indices2", ref);
    }

    public static int[] getModel_sine() {
        return (int[])AppletLoader.getSingleton().getFieldValue("Model", "Model_sine", null);
    }

    public int[] getIndices1() {
        return (int[])AppletLoader.getSingleton().getFieldValue("Model", "indices1", ref);
    }

    public static int[] getModelViewportXs() {
        return (int[])AppletLoader.getSingleton().getFieldValue("Model", "modelViewportXs", null);
    }

    public int getBottomY() {
        return (int)AppletLoader.getSingleton().getFieldValue("Model", "bottomY", ref);
    }

    public int getBoundsType() {
        return (int)AppletLoader.getSingleton().getFieldValue("Model", "boundsType", ref);
    }

    public int[] getVerticesX() {
        return (int[])AppletLoader.getSingleton().getFieldValue("Model", "verticesX", ref);
    }

    public int[] getIndices3() {
        return (int[])AppletLoader.getSingleton().getFieldValue("Model", "indices3", ref);
    }

    public int[] getVerticesY() {
        return (int[])AppletLoader.getSingleton().getFieldValue("Model", "verticesY", ref);
    }

    public int[] getVerticesZ() {
        return (int[])AppletLoader.getSingleton().getFieldValue("Model", "verticesZ", ref);
    }

    public int getDiameter() {
        return (int)AppletLoader.getSingleton().getFieldValue("Model", "diameter", ref);
    }

    public static int[] getModel_cosine() {
        return (int[])AppletLoader.getSingleton().getFieldValue("Model", "Model_cosine", null);
    }

    public static int[] getXViewportBuffer() {
        return (int[])AppletLoader.getSingleton().getFieldValue("Model", "xViewportBuffer", null);
    }

    public int getRadius() {
        return (int)AppletLoader.getSingleton().getFieldValue("Model", "radius", ref);
    }

    public static int[] getYViewportBuffer() {
        return (int[])AppletLoader.getSingleton().getFieldValue("Model", "yViewportBuffer", null);
    }

    public static boolean getUseBoundingBoxes3D() {
        return (boolean)AppletLoader.getSingleton().getFieldValue("Model", "useBoundingBoxes3D", null);
    }

}
